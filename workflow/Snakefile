'''Workflow for the CAMP short-read assembly module.'''


from contextlib import redirect_stderr
import os
from os.path import abspath, basename, dirname, exists, join
import pandas as pd
import shutil # from shutil import copy doesn't work here
from utils import Workflow_Dirs, ingest_samples


# Load and/or make the working directory structure
dirs = Workflow_Dirs(config['work_dir'], "short-read-assembly")


# Load sample names and input files 
SAMPLES = ingest_samples(config['samples'], dirs.TMP)


# --- Workflow output --- #


def workflow_mode(wildcards):
    out = []
    lst = config['assembler'].split(',')
    if 'metaspades' in lst:
        out.extend(expand(join(dirs.OUT,'0_metaspades', '{sample}', 'scaffolds.fasta'), sample = SAMPLES))
    if 'megahit' in lst:
        out.extend(expand(join(dirs.OUT,'1_megahit', '{sample}', 'contigs.fasta'), sample = SAMPLES))
    return(out)


rule all:
    input:
        join(dirs.OUT, 'final_reports', 'samples.csv')


# --- Workflow steps --- #


rule metaspades_assembly:
    input:
        fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
        rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
    output:
        join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
    log:
        join(dirs.LOG, 'metaspades', '{sample}.out'),
    conda:
        join(config['env_yamls'], 'assemblers.yaml'),
    threads:
        config['assembly_threads'],
    resources:
        mem_mb = config['assembly_mem_mb'],
    params:
        out_dir = join(dirs.OUT,'0_metaspades','{sample}'),
        option = '--' + config['option'],
    shell:
        """
        if [ -f "{params.out_dir}/K33/assembly_graph.fastg" ]; then
            spades.py --restart-from k55 -o {params.out_dir} -t {threads} -m {resources.mem_mb} # Restart from k = 55
        elif [ -f "{params.out_dir}/K21/assembly_graph.fastg" ]; then
            spades.py --restart-from k33 -o {params.out_dir} -t {threads} -m {resources.mem_mb} # Restart from k = 33
        elif [ -f "{params.out_dir}/corrected.yaml" ]; then
            spades.py --restart-from k21 -o {params.out_dir} -t {threads} -m {resources.mem_mb} # Restart from k = 21
        else
            spades.py --only-assembler {params.option} -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev} -o {params.out_dir} 
        fi
        """    


rule megahit_assembly:
    input:
        fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
        rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
    output:
        join(dirs.OUT,'1_megahit','{sample}', 'contigs.fasta'),
    log:
        join(dirs.LOG, 'megahit', '{sample}.out'),
    conda:
        join(config['env_yamls'], 'assemblers.yaml'),
    threads:
        config['assembly_threads'],
    resources:
        mem_mb = config['assembly_mem_mb'],
    params:
        out_dir = join(dirs.OUT,'1_megahit','{sample}'),
    shell:
        """
        megahit -t {threads} -m {resources.mem_mb} --force -1 {input.fwd} -2 {input.rev} -o {params.out_dir}
        mv {params.out_dir}/final.contigs.fa {params.out_dir}/contigs.fasta
        """    


rule make_config:
    input:
        workflow_mode,
    output:
        join(dirs.OUT, 'final_reports', 'samples.csv')
    params:
        out_dir = join(dirs.OUT, 'final_reports'),
        tmp_dir = dirs.TMP,
    run:
        dct = {}
        for i in input:
            info = str(i).split('/')
            s = info[-2]
            a = info[-3].split('_')[1]
            ctgs = join(params.out_dir, '.'.join([s, a, 'fasta']))
            shutil.copy(str(i), ctgs)
            if s not in dct:
                dct[s] = {}
            dct[s]['illumina_ctg'] = ctgs
            dct[s]['illumina_fwd'] = join(str(params.tmp_dir), s + '_1.fastq.gz')
            dct[s]['illumina_rev'] = join(str(params.tmp_dir), s + '_2.fastq.gz')
        df = pd.DataFrame.from_dict(dct, orient ='index')
        df.reset_index(inplace = True)
        df.rename(columns = {'index': 'sample_name'}, inplace = True)
        df.to_csv(str(output), index = False)


